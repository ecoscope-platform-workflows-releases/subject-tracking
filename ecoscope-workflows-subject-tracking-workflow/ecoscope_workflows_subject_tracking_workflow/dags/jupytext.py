# AUTOGENERATED BY ECOSCOPE-WORKFLOWS; see fingerprint in README.md for details


# ruff: noqa: E402

# %% [markdown]
# # Subject Tracking
# TODO: top level description

# %% [markdown]
# ## Imports

import os

from ecoscope_workflows_core.tasks.analysis import (
    dataframe_column_max,
    dataframe_column_mean,
    dataframe_column_sum,
    dataframe_count,
)
from ecoscope_workflows_core.tasks.config import set_string_var, set_workflow_details
from ecoscope_workflows_core.tasks.filter import set_time_range
from ecoscope_workflows_core.tasks.groupby import set_groupers, split_groups
from ecoscope_workflows_core.tasks.io import persist_text, set_er_connection
from ecoscope_workflows_core.tasks.results import (
    create_map_widget_single_view,
    create_plot_widget_single_view,
    create_single_value_widget_single_view,
    gather_dashboard,
    merge_widget_views,
)
from ecoscope_workflows_core.tasks.skip import (
    any_dependency_skipped,
    any_is_empty_df,
    never,
)
from ecoscope_workflows_core.tasks.transformation import (
    add_temporal_index,
    convert_column_values_to_string,
    map_columns,
    map_values,
    sort_values,
    with_unit,
)
from ecoscope_workflows_ext_ecoscope.tasks.analysis import (
    calculate_elliptical_time_density,
    get_night_day_ratio,
)
from ecoscope_workflows_ext_ecoscope.tasks.io import get_subjectgroup_observations
from ecoscope_workflows_ext_ecoscope.tasks.preprocessing import (
    process_relocations,
    relocations_to_trajectory,
)
from ecoscope_workflows_ext_ecoscope.tasks.results import (
    create_polygon_layer,
    create_polyline_layer,
    draw_ecomap,
    draw_ecoplot,
    set_base_maps,
)
from ecoscope_workflows_ext_ecoscope.tasks.skip import all_geometry_are_none
from ecoscope_workflows_ext_ecoscope.tasks.transformation import (
    apply_classification,
    apply_color_map,
    classify_is_night,
)

# %% [markdown]
# ## Workflow Details

# %%
# parameters

workflow_details_params = dict(
    name=...,
    description=...,
    image_url=...,
)

# %%
# call the task


workflow_details = (
    set_workflow_details.handle_errors(task_instance_id="workflow_details")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(**workflow_details_params)
    .call()
)


# %% [markdown]
# ## Data Source

# %%
# parameters

er_client_name_params = dict(
    data_source=...,
)

# %%
# call the task


er_client_name = (
    set_er_connection.handle_errors(task_instance_id="er_client_name")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(**er_client_name_params)
    .call()
)


# %% [markdown]
# ## Time Range

# %%
# parameters

time_range_params = dict(
    since=...,
    until=...,
)

# %%
# call the task


time_range = (
    set_time_range.handle_errors(task_instance_id="time_range")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(time_format="%d %b %Y %H:%M:%S %Z", **time_range_params)
    .call()
)


# %% [markdown]
# ##

# %%
# parameters

subject_obs_params = dict(
    subject_group_name=...,
)

# %%
# call the task


subject_obs = (
    get_subjectgroup_observations.handle_errors(task_instance_id="subject_obs")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        client=er_client_name,
        time_range=time_range,
        raise_on_empty=False,
        include_details=False,
        include_subjectsource_details=False,
        **subject_obs_params,
    )
    .call()
)


# %% [markdown]
# ## Group Data

# %%
# parameters

groupers_params = dict(
    groupers=...,
)

# %%
# call the task


groupers = (
    set_groupers.handle_errors(task_instance_id="groupers")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(**groupers_params)
    .call()
)


# %% [markdown]
# ## Transform Observations to Relocations

# %%
# parameters

subject_reloc_params = dict()

# %%
# call the task


subject_reloc = (
    process_relocations.handle_errors(task_instance_id="subject_reloc")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        observations=subject_obs,
        relocs_columns=[
            "groupby_col",
            "fixtime",
            "junk_status",
            "geometry",
            "extra__subject__name",
            "extra__subject__subject_subtype",
            "extra__subject__sex",
        ],
        filter_point_coords=[
            {"x": 180.0, "y": 90.0},
            {"x": 0.0, "y": 0.0},
            {"x": 1.0, "y": 1.0},
        ],
        **subject_reloc_params,
    )
    .call()
)


# %% [markdown]
# ## Apply Day/Night Labels to Relocations

# %%
# parameters

day_night_labels_params = dict()

# %%
# call the task


day_night_labels = (
    classify_is_night.handle_errors(task_instance_id="day_night_labels")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(relocations=subject_reloc, **day_night_labels_params)
    .call()
)


# %% [markdown]
# ## Trajectory Segment Filter

# %%
# parameters

subject_traj_params = dict(
    trajectory_segment_filter=...,
)

# %%
# call the task


subject_traj = (
    relocations_to_trajectory.handle_errors(task_instance_id="subject_traj")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(relocations=day_night_labels, **subject_traj_params)
    .call()
)


# %% [markdown]
# ## Add temporal index to Subject Trajectories

# %%
# parameters

traj_add_temporal_index_params = dict()

# %%
# call the task


traj_add_temporal_index = (
    add_temporal_index.handle_errors(task_instance_id="traj_add_temporal_index")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        df=subject_traj,
        time_col="segment_start",
        groupers=groupers,
        cast_to_datetime=True,
        format="mixed",
        **traj_add_temporal_index_params,
    )
    .call()
)


# %% [markdown]
# ## Rename value grouper columns

# %%
# parameters

rename_grouper_columns_params = dict()

# %%
# call the task


rename_grouper_columns = (
    map_columns.handle_errors(task_instance_id="rename_grouper_columns")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        df=traj_add_temporal_index,
        drop_columns=[],
        retain_columns=[],
        rename_columns={
            "extra__name": "subject_name",
            "extra__subject_subtype": "subject_subtype",
            "extra__sex": "subject_sex",
        },
        **rename_grouper_columns_params,
    )
    .call()
)


# %% [markdown]
# ## Map Subject Sex Values

# %%
# parameters

map_subject_sex_params = dict()

# %%
# call the task


map_subject_sex = (
    map_values.handle_errors(task_instance_id="map_subject_sex")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        df=rename_grouper_columns,
        column_name="subject_sex",
        value_map={"male": "male", "female": "female"},
        missing_values="replace",
        replacement="unknown",
        **map_subject_sex_params,
    )
    .call()
)


# %% [markdown]
# ## Classify Trajectories By Speed

# %%
# parameters

classify_traj_speed_params = dict()

# %%
# call the task


classify_traj_speed = (
    apply_classification.handle_errors(task_instance_id="classify_traj_speed")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        df=map_subject_sex,
        input_column_name="speed_kmhr",
        output_column_name="speed_bins",
        classification_options={"scheme": "equal_interval", "k": 6},
        label_options={
            "label_ranges": True,
            "label_decimals": 1,
            "label_suffix": " km/h",
        },
        **classify_traj_speed_params,
    )
    .call()
)


# %% [markdown]
# ## Set Trajectory Map Title

# %%
# parameters

set_traj_map_title_params = dict()

# %%
# call the task


set_traj_map_title = (
    set_string_var.handle_errors(task_instance_id="set_traj_map_title")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(var="Subject Group Trajectory Map", **set_traj_map_title_params)
    .call()
)


# %% [markdown]
# ## Set Time Density Map Title

# %%
# parameters

set_td_map_title_params = dict()

# %%
# call the task


set_td_map_title = (
    set_string_var.handle_errors(task_instance_id="set_td_map_title")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(var="Home Range Map", **set_td_map_title_params)
    .call()
)


# %% [markdown]
# ## Set Night/Day Map Title

# %%
# parameters

set_night_day_map_title_params = dict()

# %%
# call the task


set_night_day_map_title = (
    set_string_var.handle_errors(task_instance_id="set_night_day_map_title")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(var="Subject Group Night/Day Map", **set_night_day_map_title_params)
    .call()
)


# %% [markdown]
# ## Set NSD Chart Title

# %%
# parameters

set_nsd_chart_title_params = dict()

# %%
# call the task


set_nsd_chart_title = (
    set_string_var.handle_errors(task_instance_id="set_nsd_chart_title")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(var="Net Square Displacement", **set_nsd_chart_title_params)
    .call()
)


# %% [markdown]
# ## Split Subject Trajectories by Group

# %%
# parameters

split_subject_traj_groups_params = dict()

# %%
# call the task


split_subject_traj_groups = (
    split_groups.handle_errors(task_instance_id="split_subject_traj_groups")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        df=classify_traj_speed, groupers=groupers, **split_subject_traj_groups_params
    )
    .call()
)


# %% [markdown]
# ## Map Base Layers

# %%
# parameters

base_map_defs_params = dict(
    base_maps=...,
)

# %%
# call the task


base_map_defs = (
    set_base_maps.handle_errors(task_instance_id="base_map_defs")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(**base_map_defs_params)
    .call()
)


# %% [markdown]
# ## Sort Trajetories By Classification

# %%
# parameters

sort_traj_speed_params = dict()

# %%
# call the task


sort_traj_speed = (
    sort_values.handle_errors(task_instance_id="sort_traj_speed")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        column_name="speed_kmhr",
        ascending=True,
        na_position="last",
        **sort_traj_speed_params,
    )
    .mapvalues(argnames=["df"], argvalues=split_subject_traj_groups)
)


# %% [markdown]
# ## Apply Color to Trajectories By Speed

# %%
# parameters

colormap_traj_speed_params = dict()

# %%
# call the task


colormap_traj_speed = (
    apply_color_map.handle_errors(task_instance_id="colormap_traj_speed")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        input_column_name="speed_bins",
        output_column_name="speed_bins_colormap",
        colormap=["#1a9850", "#91cf60", "#d9ef8b", "#fee08b", "#fc8d59", "#d73027"],
        **colormap_traj_speed_params,
    )
    .mapvalues(argnames=["df"], argvalues=sort_traj_speed)
)


# %% [markdown]
# ## Rename columns for map tooltip display

# %%
# parameters

rename_speed_display_columns_params = dict()

# %%
# call the task


rename_speed_display_columns = (
    map_columns.handle_errors(task_instance_id="rename_speed_display_columns")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        drop_columns=[],
        retain_columns=[],
        rename_columns={
            "segment_start": "Start",
            "timespan_seconds": "Duration (s)",
            "speed_kmhr": "Speed (kph)",
            "extra__is_night": "Nighttime",
            "subject_name": "Subject Name",
            "subject_sex": "Subject Sex",
        },
        **rename_speed_display_columns_params,
    )
    .mapvalues(argnames=["df"], argvalues=colormap_traj_speed)
)


# %% [markdown]
# ## Create map layer for each trajectory group

# %%
# parameters

traj_map_layers_params = dict(
    zoom=...,
)

# %%
# call the task


traj_map_layers = (
    create_polyline_layer.handle_errors(task_instance_id="traj_map_layers")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
            all_geometry_are_none,
        ],
        unpack_depth=1,
    )
    .partial(
        layer_style={"color_column": "speed_bins_colormap"},
        legend={"label_column": "speed_bins", "color_column": "speed_bins_colormap"},
        tooltip_columns=[
            "Start",
            "Duration (s)",
            "Speed (kph)",
            "Nighttime",
            "Subject Name",
            "Subject Sex",
        ],
        **traj_map_layers_params,
    )
    .mapvalues(argnames=["geodataframe"], argvalues=rename_speed_display_columns)
)


# %% [markdown]
# ## Draw Ecomaps for each trajectory group

# %%
# parameters

traj_ecomap_params = dict(
    view_state=...,
)

# %%
# call the task


traj_ecomap = (
    draw_ecomap.handle_errors(task_instance_id="traj_ecomap")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        tile_layers=base_map_defs,
        north_arrow_style={"placement": "top-left"},
        legend_style={"title": "Speed", "placement": "bottom-right"},
        static=False,
        title=None,
        max_zoom=20,
        widget_id=set_traj_map_title,
        **traj_ecomap_params,
    )
    .mapvalues(argnames=["geo_layers"], argvalues=traj_map_layers)
)


# %% [markdown]
# ## Persist ecomap as Text

# %%
# parameters

ecomap_html_urls_params = dict(
    filename=...,
)

# %%
# call the task


ecomap_html_urls = (
    persist_text.handle_errors(task_instance_id="ecomap_html_urls")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        root_path=os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
        filename_suffix="v2",
        **ecomap_html_urls_params,
    )
    .mapvalues(argnames=["text"], argvalues=traj_ecomap)
)


# %% [markdown]
# ## Create Map Widgets for Trajectories

# %%
# parameters

traj_map_widgets_single_views_params = dict()

# %%
# call the task


traj_map_widgets_single_views = (
    create_map_widget_single_view.handle_errors(
        task_instance_id="traj_map_widgets_single_views"
    )
    .skipif(
        conditions=[
            never,
        ],
        unpack_depth=1,
    )
    .partial(title=set_traj_map_title, **traj_map_widgets_single_views_params)
    .map(argnames=["view", "data"], argvalues=ecomap_html_urls)
)


# %% [markdown]
# ## Merge EcoMap Widget Views

# %%
# parameters

traj_grouped_map_widget_params = dict()

# %%
# call the task


traj_grouped_map_widget = (
    merge_widget_views.handle_errors(task_instance_id="traj_grouped_map_widget")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(widgets=traj_map_widgets_single_views, **traj_grouped_map_widget_params)
    .call()
)


# %% [markdown]
# ## Sort Trajetories By Night/Day Classification

# %%
# parameters

sort_traj_night_day_params = dict()

# %%
# call the task


sort_traj_night_day = (
    sort_values.handle_errors(task_instance_id="sort_traj_night_day")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        column_name="extra__is_night",
        ascending=False,
        na_position="last",
        **sort_traj_night_day_params,
    )
    .mapvalues(argnames=["df"], argvalues=split_subject_traj_groups)
)


# %% [markdown]
# ## Apply Color to Trajectories By Day/Night

# %%
# parameters

colormap_traj_night_params = dict()

# %%
# call the task


colormap_traj_night = (
    apply_color_map.handle_errors(task_instance_id="colormap_traj_night")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        colormap=["#292965", "#e7a553"],
        input_column_name="extra__is_night",
        output_column_name="is_night_colors",
        **colormap_traj_night_params,
    )
    .mapvalues(argnames=["df"], argvalues=sort_traj_night_day)
)


# %% [markdown]
# ## Rename columns for map tooltip display

# %%
# parameters

rename_nightday_display_columns_params = dict()

# %%
# call the task


rename_nightday_display_columns = (
    map_columns.handle_errors(task_instance_id="rename_nightday_display_columns")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        drop_columns=[],
        retain_columns=[],
        rename_columns={
            "subject_name": "Subject Name",
            "subject_subtype": "Subject Sex",
            "extra__is_night": "Nighttime",
        },
        **rename_nightday_display_columns_params,
    )
    .mapvalues(argnames=["df"], argvalues=colormap_traj_night)
)


# %% [markdown]
# ## Create map layer for each trajectory group

# %%
# parameters

traj_map_night_layers_params = dict(
    zoom=...,
)

# %%
# call the task


traj_map_night_layers = (
    create_polyline_layer.handle_errors(task_instance_id="traj_map_night_layers")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
            all_geometry_are_none,
        ],
        unpack_depth=1,
    )
    .partial(
        layer_style={"color_column": "is_night_colors"},
        legend={"labels": ["Night", "Day"], "colors": ["#292965", "#e7a553"]},
        tooltip_columns=["Subject Name", "Subject Sex", "Nighttime"],
        **traj_map_night_layers_params,
    )
    .mapvalues(argnames=["geodataframe"], argvalues=rename_nightday_display_columns)
)


# %% [markdown]
# ## Draw Ecomaps for each trajectory group

# %%
# parameters

traj_nightday_ecomap_params = dict(
    view_state=...,
)

# %%
# call the task


traj_nightday_ecomap = (
    draw_ecomap.handle_errors(task_instance_id="traj_nightday_ecomap")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        tile_layers=base_map_defs,
        north_arrow_style={"placement": "top-left"},
        legend_style={"title": "Day / Night Movement", "placement": "bottom-right"},
        static=False,
        title=None,
        max_zoom=20,
        widget_id=set_night_day_map_title,
        **traj_nightday_ecomap_params,
    )
    .mapvalues(argnames=["geo_layers"], argvalues=traj_map_night_layers)
)


# %% [markdown]
# ## Persist ecomap as Text

# %%
# parameters

ecomap_nightday_html_urls_params = dict(
    filename=...,
)

# %%
# call the task


ecomap_nightday_html_urls = (
    persist_text.handle_errors(task_instance_id="ecomap_nightday_html_urls")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        root_path=os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
        filename_suffix="v2",
        **ecomap_nightday_html_urls_params,
    )
    .mapvalues(argnames=["text"], argvalues=traj_nightday_ecomap)
)


# %% [markdown]
# ## Create Map Widgets for Trajectories

# %%
# parameters

traj_map_nightday_widgets_sv_params = dict()

# %%
# call the task


traj_map_nightday_widgets_sv = (
    create_map_widget_single_view.handle_errors(
        task_instance_id="traj_map_nightday_widgets_sv"
    )
    .skipif(
        conditions=[
            never,
        ],
        unpack_depth=1,
    )
    .partial(title=set_night_day_map_title, **traj_map_nightday_widgets_sv_params)
    .map(argnames=["view", "data"], argvalues=ecomap_nightday_html_urls)
)


# %% [markdown]
# ## Merge EcoMap Widget Views

# %%
# parameters

traj_nightday_grouped_map_widget_params = dict()

# %%
# call the task


traj_nightday_grouped_map_widget = (
    merge_widget_views.handle_errors(
        task_instance_id="traj_nightday_grouped_map_widget"
    )
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        widgets=traj_map_nightday_widgets_sv, **traj_nightday_grouped_map_widget_params
    )
    .call()
)


# %% [markdown]
# ## Calculate Mean Speed Per Group

# %%
# parameters

mean_speed_params = dict()

# %%
# call the task


mean_speed = (
    dataframe_column_mean.handle_errors(task_instance_id="mean_speed")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(column_name="speed_kmhr", **mean_speed_params)
    .mapvalues(argnames=["df"], argvalues=split_subject_traj_groups)
)


# %% [markdown]
# ## Convert Average Speed units

# %%
# parameters

average_speed_converted_params = dict()

# %%
# call the task


average_speed_converted = (
    with_unit.handle_errors(task_instance_id="average_speed_converted")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(original_unit="km/h", new_unit="km/h", **average_speed_converted_params)
    .mapvalues(argnames=["value"], argvalues=mean_speed)
)


# %% [markdown]
# ## Create Single Value Widgets for Mean Speed Per Group

# %%
# parameters

mean_speed_sv_widgets_params = dict()

# %%
# call the task


mean_speed_sv_widgets = (
    create_single_value_widget_single_view.handle_errors(
        task_instance_id="mean_speed_sv_widgets"
    )
    .skipif(
        conditions=[
            never,
        ],
        unpack_depth=1,
    )
    .partial(title="Mean Speed", decimal_places=1, **mean_speed_sv_widgets_params)
    .map(argnames=["view", "data"], argvalues=average_speed_converted)
)


# %% [markdown]
# ## Merge per group Mean Speed SV widgets

# %%
# parameters

mean_speed_grouped_sv_widget_params = dict()

# %%
# call the task


mean_speed_grouped_sv_widget = (
    merge_widget_views.handle_errors(task_instance_id="mean_speed_grouped_sv_widget")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(widgets=mean_speed_sv_widgets, **mean_speed_grouped_sv_widget_params)
    .call()
)


# %% [markdown]
# ## Calculate Max Speed Per Group

# %%
# parameters

max_speed_params = dict()

# %%
# call the task


max_speed = (
    dataframe_column_max.handle_errors(task_instance_id="max_speed")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(column_name="speed_kmhr", **max_speed_params)
    .mapvalues(argnames=["df"], argvalues=split_subject_traj_groups)
)


# %% [markdown]
# ## Convert Max Speed units

# %%
# parameters

max_speed_converted_params = dict()

# %%
# call the task


max_speed_converted = (
    with_unit.handle_errors(task_instance_id="max_speed_converted")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(original_unit="km/h", new_unit="km/h", **max_speed_converted_params)
    .mapvalues(argnames=["value"], argvalues=max_speed)
)


# %% [markdown]
# ## Create Single Value Widgets for Max Speed Per Group

# %%
# parameters

max_speed_sv_widgets_params = dict()

# %%
# call the task


max_speed_sv_widgets = (
    create_single_value_widget_single_view.handle_errors(
        task_instance_id="max_speed_sv_widgets"
    )
    .skipif(
        conditions=[
            never,
        ],
        unpack_depth=1,
    )
    .partial(title="Max Speed", decimal_places=1, **max_speed_sv_widgets_params)
    .map(argnames=["view", "data"], argvalues=max_speed_converted)
)


# %% [markdown]
# ## Merge per group Max Speed SV widgets

# %%
# parameters

max_speed_grouped_sv_widget_params = dict()

# %%
# call the task


max_speed_grouped_sv_widget = (
    merge_widget_views.handle_errors(task_instance_id="max_speed_grouped_sv_widget")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(widgets=max_speed_sv_widgets, **max_speed_grouped_sv_widget_params)
    .call()
)


# %% [markdown]
# ## Calculate Number of Locations Per Group

# %%
# parameters

num_location_params = dict()

# %%
# call the task


num_location = (
    dataframe_count.handle_errors(task_instance_id="num_location")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(**num_location_params)
    .mapvalues(argnames=["df"], argvalues=split_subject_traj_groups)
)


# %% [markdown]
# ## Create Single Value Widgets for Number of Location Per Group

# %%
# parameters

num_location_sv_widgets_params = dict()

# %%
# call the task


num_location_sv_widgets = (
    create_single_value_widget_single_view.handle_errors(
        task_instance_id="num_location_sv_widgets"
    )
    .skipif(
        conditions=[
            never,
        ],
        unpack_depth=1,
    )
    .partial(
        title="Number of Locations", decimal_places=1, **num_location_sv_widgets_params
    )
    .map(argnames=["view", "data"], argvalues=num_location)
)


# %% [markdown]
# ## Merge per group Number of Locations SV widgets

# %%
# parameters

num_location_grouped_sv_widget_params = dict()

# %%
# call the task


num_location_grouped_sv_widget = (
    merge_widget_views.handle_errors(task_instance_id="num_location_grouped_sv_widget")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(widgets=num_location_sv_widgets, **num_location_grouped_sv_widget_params)
    .call()
)


# %% [markdown]
# ## Calculate Day/Night Ratio Per Group

# %%
# parameters

nightday_ratio_params = dict()

# %%
# call the task


nightday_ratio = (
    get_night_day_ratio.handle_errors(task_instance_id="nightday_ratio")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(**nightday_ratio_params)
    .mapvalues(argnames=["df"], argvalues=split_subject_traj_groups)
)


# %% [markdown]
# ## Create Single Value Widgets for Day/Night Ratio Per Group

# %%
# parameters

nightday_ratio_sv_widgets_params = dict()

# %%
# call the task


nightday_ratio_sv_widgets = (
    create_single_value_widget_single_view.handle_errors(
        task_instance_id="nightday_ratio_sv_widgets"
    )
    .skipif(
        conditions=[
            never,
        ],
        unpack_depth=1,
    )
    .partial(
        title="Night/Day Ratio", decimal_places=1, **nightday_ratio_sv_widgets_params
    )
    .map(argnames=["view", "data"], argvalues=nightday_ratio)
)


# %% [markdown]
# ## Merge per group Day/Night Ratio SV widgets

# %%
# parameters

nightday_ratio_grouped_sv_widget_params = dict()

# %%
# call the task


nightday_ratio_grouped_sv_widget = (
    merge_widget_views.handle_errors(
        task_instance_id="nightday_ratio_grouped_sv_widget"
    )
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        widgets=nightday_ratio_sv_widgets, **nightday_ratio_grouped_sv_widget_params
    )
    .call()
)


# %% [markdown]
# ## Calculate Total Distance Per Group

# %%
# parameters

total_distance_params = dict()

# %%
# call the task


total_distance = (
    dataframe_column_sum.handle_errors(task_instance_id="total_distance")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(column_name="dist_meters", **total_distance_params)
    .mapvalues(argnames=["df"], argvalues=split_subject_traj_groups)
)


# %% [markdown]
# ## Convert total distance units

# %%
# parameters

total_dist_converted_params = dict()

# %%
# call the task


total_dist_converted = (
    with_unit.handle_errors(task_instance_id="total_dist_converted")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(original_unit="m", new_unit="km", **total_dist_converted_params)
    .mapvalues(argnames=["value"], argvalues=total_distance)
)


# %% [markdown]
# ## Create Single Value Widgets for Total Distance Per Group

# %%
# parameters

total_distance_sv_widgets_params = dict()

# %%
# call the task


total_distance_sv_widgets = (
    create_single_value_widget_single_view.handle_errors(
        task_instance_id="total_distance_sv_widgets"
    )
    .skipif(
        conditions=[
            never,
        ],
        unpack_depth=1,
    )
    .partial(
        title="Total Distance", decimal_places=1, **total_distance_sv_widgets_params
    )
    .map(argnames=["view", "data"], argvalues=total_dist_converted)
)


# %% [markdown]
# ## Merge per group Total Distance SV widgets

# %%
# parameters

total_dist_grouped_sv_widget_params = dict()

# %%
# call the task


total_dist_grouped_sv_widget = (
    merge_widget_views.handle_errors(task_instance_id="total_dist_grouped_sv_widget")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(widgets=total_distance_sv_widgets, **total_dist_grouped_sv_widget_params)
    .call()
)


# %% [markdown]
# ## Calculate Total Time Per Group

# %%
# parameters

total_time_params = dict()

# %%
# call the task


total_time = (
    dataframe_column_sum.handle_errors(task_instance_id="total_time")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(column_name="timespan_seconds", **total_time_params)
    .mapvalues(argnames=["df"], argvalues=split_subject_traj_groups)
)


# %% [markdown]
# ## Convert total time units

# %%
# parameters

total_time_converted_params = dict()

# %%
# call the task


total_time_converted = (
    with_unit.handle_errors(task_instance_id="total_time_converted")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(original_unit="s", new_unit="h", **total_time_converted_params)
    .mapvalues(argnames=["value"], argvalues=total_time)
)


# %% [markdown]
# ## Create Single Value Widgets for Total Distance Per Group

# %%
# parameters

total_time_sv_widgets_params = dict()

# %%
# call the task


total_time_sv_widgets = (
    create_single_value_widget_single_view.handle_errors(
        task_instance_id="total_time_sv_widgets"
    )
    .skipif(
        conditions=[
            never,
        ],
        unpack_depth=1,
    )
    .partial(title="Total Time", decimal_places=1, **total_time_sv_widgets_params)
    .map(argnames=["view", "data"], argvalues=total_time_converted)
)


# %% [markdown]
# ## Merge per group Total Distance SV widgets

# %%
# parameters

total_time_grouped_sv_widget_params = dict()

# %%
# call the task


total_time_grouped_sv_widget = (
    merge_widget_views.handle_errors(task_instance_id="total_time_grouped_sv_widget")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(widgets=total_time_sv_widgets, **total_time_grouped_sv_widget_params)
    .call()
)


# %% [markdown]
# ##

# %%
# parameters

td_params = dict(
    auto_scale_or_custom_cell_size=...,
    crs=...,
    max_speed_factor=...,
    expansion_factor=...,
)

# %%
# call the task


td = (
    calculate_elliptical_time_density.handle_errors(task_instance_id="td")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        percentiles=[50.0, 60.0, 70.0, 80.0, 90.0, 99.999],
        nodata_value="nan",
        band_count=1,
        **td_params,
    )
    .mapvalues(argnames=["trajectory_gdf"], argvalues=split_subject_traj_groups)
)


# %% [markdown]
# ## Cast Percentile Column

# %%
# parameters

percentile_col_to_string_params = dict()

# %%
# call the task


percentile_col_to_string = (
    convert_column_values_to_string.handle_errors(
        task_instance_id="percentile_col_to_string"
    )
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(columns=["percentile"], **percentile_col_to_string_params)
    .mapvalues(argnames=["df"], argvalues=td)
)


# %% [markdown]
# ## Time Density Colormap

# %%
# parameters

td_colormap_params = dict()

# %%
# call the task


td_colormap = (
    apply_color_map.handle_errors(task_instance_id="td_colormap")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        input_column_name="percentile",
        colormap="RdYlGn_r",
        output_column_name="percentile_colormap",
        **td_colormap_params,
    )
    .mapvalues(argnames=["df"], argvalues=percentile_col_to_string)
)


# %% [markdown]
# ## Create map layer from Time Density

# %%
# parameters

td_map_layer_params = dict(
    zoom=...,
)

# %%
# call the task


td_map_layer = (
    create_polygon_layer.handle_errors(task_instance_id="td_map_layer")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
            all_geometry_are_none,
        ],
        unpack_depth=1,
    )
    .partial(
        layer_style={
            "fill_color_column": "percentile_colormap",
            "opacity": 0.7,
            "get_line_width": 0,
        },
        legend={
            "label_column": "percentile",
            "label_suffix": " %",
            "color_column": "percentile_colormap",
            "sort": "ascending",
        },
        tooltip_columns=["percentile"],
        **td_map_layer_params,
    )
    .mapvalues(argnames=["geodataframe"], argvalues=td_colormap)
)


# %% [markdown]
# ## Draw Ecomap from Time Density

# %%
# parameters

td_ecomap_params = dict(
    view_state=...,
)

# %%
# call the task


td_ecomap = (
    draw_ecomap.handle_errors(task_instance_id="td_ecomap")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        tile_layers=base_map_defs,
        north_arrow_style={"placement": "top-left"},
        legend_style={"title": "Time Spent", "placement": "bottom-right"},
        static=False,
        title=None,
        max_zoom=20,
        widget_id=set_td_map_title,
        **td_ecomap_params,
    )
    .mapvalues(argnames=["geo_layers"], argvalues=td_map_layer)
)


# %% [markdown]
# ## Persist Ecomap as Text

# %%
# parameters

td_ecomap_html_url_params = dict(
    filename=...,
)

# %%
# call the task


td_ecomap_html_url = (
    persist_text.handle_errors(task_instance_id="td_ecomap_html_url")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        root_path=os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
        filename_suffix="v2",
        **td_ecomap_html_url_params,
    )
    .mapvalues(argnames=["text"], argvalues=td_ecomap)
)


# %% [markdown]
# ## Create Time Density Map Widget

# %%
# parameters

td_map_widget_params = dict()

# %%
# call the task


td_map_widget = (
    create_map_widget_single_view.handle_errors(task_instance_id="td_map_widget")
    .skipif(
        conditions=[
            never,
        ],
        unpack_depth=1,
    )
    .partial(title=set_td_map_title, **td_map_widget_params)
    .map(argnames=["view", "data"], argvalues=td_ecomap_html_url)
)


# %% [markdown]
# ## Merge Time Density Map Widget Views

# %%
# parameters

td_grouped_map_widget_params = dict()

# %%
# call the task


td_grouped_map_widget = (
    merge_widget_views.handle_errors(task_instance_id="td_grouped_map_widget")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(widgets=td_map_widget, **td_grouped_map_widget_params)
    .call()
)


# %% [markdown]
# ## Rename axis label for NSD plot

# %%
# parameters

nsd_rename_display_columns_params = dict()

# %%
# call the task


nsd_rename_display_columns = (
    map_columns.handle_errors(task_instance_id="nsd_rename_display_columns")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        drop_columns=[],
        retain_columns=[],
        rename_columns={"segment_start": "Time", "nsd": "NSD (m²)"},
        **nsd_rename_display_columns_params,
    )
    .mapvalues(argnames=["df"], argvalues=split_subject_traj_groups)
)


# %% [markdown]
# ## Draw NSD Scatter Chart

# %%
# parameters

nsd_chart_params = dict()

# %%
# call the task


nsd_chart = (
    draw_ecoplot.handle_errors(task_instance_id="nsd_chart")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        group_by="subject_name",
        ecoplot_configs=[
            {
                "x_col": "Time",
                "y_col": "NSD (m²)",
                "plot_style": {"xperiodalignment": None},
                "color_column": None,
            }
        ],
        tickformat="%b-%Y",
        widget_id=set_nsd_chart_title,
        **nsd_chart_params,
    )
    .mapvalues(argnames=["dataframe"], argvalues=nsd_rename_display_columns)
)


# %% [markdown]
# ## Persist NSD Scatter Chart as Text

# %%
# parameters

nsd_chart_html_url_params = dict(
    filename=...,
)

# %%
# call the task


nsd_chart_html_url = (
    persist_text.handle_errors(task_instance_id="nsd_chart_html_url")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        root_path=os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
        filename_suffix="v2",
        **nsd_chart_html_url_params,
    )
    .mapvalues(argnames=["text"], argvalues=nsd_chart)
)


# %% [markdown]
# ## Create NSD Plot Widget

# %%
# parameters

nsd_chart_widget_params = dict()

# %%
# call the task


nsd_chart_widget = (
    create_plot_widget_single_view.handle_errors(task_instance_id="nsd_chart_widget")
    .skipif(
        conditions=[
            never,
        ],
        unpack_depth=1,
    )
    .partial(title=set_nsd_chart_title, **nsd_chart_widget_params)
    .map(argnames=["view", "data"], argvalues=nsd_chart_html_url)
)


# %% [markdown]
# ## Merge NSD Widget Views

# %%
# parameters

grouped_nsd_chart_widget_merge_params = dict()

# %%
# call the task


grouped_nsd_chart_widget_merge = (
    merge_widget_views.handle_errors(task_instance_id="grouped_nsd_chart_widget_merge")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(widgets=nsd_chart_widget, **grouped_nsd_chart_widget_merge_params)
    .call()
)


# %% [markdown]
# ## Create Dashboard with Subject Tracking Widgets

# %%
# parameters

subject_tracking_dashboard_params = dict()

# %%
# call the task


subject_tracking_dashboard = (
    gather_dashboard.handle_errors(task_instance_id="subject_tracking_dashboard")
    .skipif(
        conditions=[
            any_is_empty_df,
            any_dependency_skipped,
        ],
        unpack_depth=1,
    )
    .partial(
        details=workflow_details,
        widgets=[
            traj_grouped_map_widget,
            mean_speed_grouped_sv_widget,
            max_speed_grouped_sv_widget,
            num_location_grouped_sv_widget,
            nightday_ratio_grouped_sv_widget,
            total_dist_grouped_sv_widget,
            total_time_grouped_sv_widget,
            td_grouped_map_widget,
            traj_nightday_grouped_map_widget,
            grouped_nsd_chart_widget_merge,
        ],
        groupers=groupers,
        time_range=time_range,
        **subject_tracking_dashboard_params,
    )
    .call()
)
