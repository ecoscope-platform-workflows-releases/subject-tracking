# AUTOGENERATED BY ECOSCOPE-WORKFLOWS; see fingerprint in README.md for details
import json
import os

from ecoscope_workflows_core.graph import DependsOn, DependsOnSequence, Graph, Node

from ecoscope_workflows_core.tasks.config import set_workflow_details
from ecoscope_workflows_core.tasks.skip import any_is_empty_df
from ecoscope_workflows_core.tasks.skip import any_dependency_skipped
from ecoscope_workflows_core.tasks.io import set_er_connection
from ecoscope_workflows_core.tasks.filter import set_time_range
from ecoscope_workflows_ext_ecoscope.tasks.io import get_subjectgroup_observations
from ecoscope_workflows_core.tasks.groupby import set_groupers
from ecoscope_workflows_ext_ecoscope.tasks.preprocessing import process_relocations
from ecoscope_workflows_ext_ecoscope.tasks.transformation import classify_is_night
from ecoscope_workflows_ext_ecoscope.tasks.preprocessing import (
    relocations_to_trajectory,
)
from ecoscope_workflows_core.tasks.transformation import add_temporal_index
from ecoscope_workflows_core.tasks.transformation import map_columns
from ecoscope_workflows_core.tasks.transformation import map_values
from ecoscope_workflows_ext_ecoscope.tasks.transformation import apply_classification
from ecoscope_workflows_core.tasks.groupby import split_groups
from ecoscope_workflows_ext_ecoscope.tasks.results import set_base_maps
from ecoscope_workflows_core.tasks.transformation import sort_values
from ecoscope_workflows_ext_ecoscope.tasks.transformation import apply_color_map
from ecoscope_workflows_core.tasks.transformation import map_values_with_unit
from ecoscope_workflows_ext_ecoscope.tasks.results import create_polyline_layer
from ecoscope_workflows_ext_ecoscope.tasks.skip import all_geometry_are_none
from ecoscope_workflows_ext_ecoscope.tasks.results import draw_ecomap
from ecoscope_workflows_core.tasks.io import persist_text
from ecoscope_workflows_core.tasks.results import create_map_widget_single_view
from ecoscope_workflows_core.tasks.skip import never
from ecoscope_workflows_core.tasks.results import merge_widget_views
from ecoscope_workflows_core.tasks.analysis import dataframe_column_mean
from ecoscope_workflows_core.tasks.transformation import with_unit
from ecoscope_workflows_core.tasks.results import create_single_value_widget_single_view
from ecoscope_workflows_core.tasks.analysis import dataframe_column_max
from ecoscope_workflows_core.tasks.analysis import dataframe_count
from ecoscope_workflows_ext_ecoscope.tasks.analysis import get_night_day_ratio
from ecoscope_workflows_core.tasks.analysis import dataframe_column_sum
from ecoscope_workflows_ext_ecoscope.tasks.analysis import (
    calculate_elliptical_time_density,
)
from ecoscope_workflows_ext_ecoscope.tasks.results import create_polygon_layer
from ecoscope_workflows_ext_ecoscope.tasks.results import draw_ecoplot
from ecoscope_workflows_core.tasks.results import create_plot_widget_single_view
from ecoscope_workflows_core.tasks.results import gather_dashboard

from ..params import Params


def main(params: Params):
    params_dict = json.loads(params.model_dump_json(exclude_unset=True))

    dependencies = {
        "workflow_details": [],
        "er_client_name": [],
        "time_range": [],
        "subject_obs": ["er_client_name", "time_range"],
        "groupers": [],
        "subject_reloc": ["subject_obs"],
        "day_night_labels": ["subject_reloc"],
        "subject_traj": ["day_night_labels"],
        "traj_add_temporal_index": ["subject_traj", "groupers"],
        "rename_grouper_columns": ["traj_add_temporal_index"],
        "map_subject_sex": ["rename_grouper_columns"],
        "classify_traj_speed": ["map_subject_sex"],
        "split_subject_traj_groups": ["classify_traj_speed", "groupers"],
        "base_map_defs": [],
        "sort_traj_speed": ["split_subject_traj_groups"],
        "colormap_traj_speed": ["sort_traj_speed"],
        "speed_bin_legend_with_unit": ["colormap_traj_speed"],
        "speed_val_with_unit": ["speed_bin_legend_with_unit"],
        "rename_speed_display_columns": ["speed_val_with_unit"],
        "traj_map_layers": ["rename_speed_display_columns"],
        "traj_ecomap": ["base_map_defs", "traj_map_layers"],
        "ecomap_html_urls": ["traj_ecomap"],
        "traj_map_widgets_single_views": ["ecomap_html_urls"],
        "traj_grouped_map_widget": ["traj_map_widgets_single_views"],
        "sort_traj_night_day": ["split_subject_traj_groups"],
        "colormap_traj_night": ["sort_traj_night_day"],
        "rename_nightday_display_columns": ["colormap_traj_night"],
        "traj_map_night_layers": ["rename_nightday_display_columns"],
        "traj_nightday_ecomap": ["base_map_defs", "traj_map_night_layers"],
        "ecomap_nightday_html_urls": ["traj_nightday_ecomap"],
        "traj_map_nightday_widgets_sv": ["ecomap_nightday_html_urls"],
        "traj_nightday_grouped_map_widget": ["traj_map_nightday_widgets_sv"],
        "mean_speed": ["split_subject_traj_groups"],
        "average_speed_converted": ["mean_speed"],
        "mean_speed_sv_widgets": ["average_speed_converted"],
        "mean_speed_grouped_sv_widget": ["mean_speed_sv_widgets"],
        "max_speed": ["split_subject_traj_groups"],
        "max_speed_converted": ["max_speed"],
        "max_speed_sv_widgets": ["max_speed_converted"],
        "max_speed_grouped_sv_widget": ["max_speed_sv_widgets"],
        "num_location": ["split_subject_traj_groups"],
        "num_location_sv_widgets": ["num_location"],
        "num_location_grouped_sv_widget": ["num_location_sv_widgets"],
        "nightday_ratio": ["split_subject_traj_groups"],
        "nightday_ratio_sv_widgets": ["nightday_ratio"],
        "nightday_ratio_grouped_sv_widget": ["nightday_ratio_sv_widgets"],
        "total_distance": ["split_subject_traj_groups"],
        "total_dist_converted": ["total_distance"],
        "total_distance_sv_widgets": ["total_dist_converted"],
        "total_dist_grouped_sv_widget": ["total_distance_sv_widgets"],
        "total_time": ["split_subject_traj_groups"],
        "total_time_converted": ["total_time"],
        "total_time_sv_widgets": ["total_time_converted"],
        "total_time_grouped_sv_widget": ["total_time_sv_widgets"],
        "td": ["split_subject_traj_groups"],
        "td_colormap": ["td"],
        "td_map_layer": ["td_colormap"],
        "td_ecomap": ["base_map_defs", "td_map_layer"],
        "td_ecomap_html_url": ["td_ecomap"],
        "td_map_widget": ["td_ecomap_html_url"],
        "td_grouped_map_widget": ["td_map_widget"],
        "nsd_rename_display_columns": ["split_subject_traj_groups"],
        "nsd_chart": ["nsd_rename_display_columns"],
        "nsd_chart_html_url": ["nsd_chart"],
        "nsd_chart_widget": ["nsd_chart_html_url"],
        "grouped_nsd_chart_widget_merge": ["nsd_chart_widget"],
        "subject_tracking_dashboard": [
            "workflow_details",
            "traj_grouped_map_widget",
            "mean_speed_grouped_sv_widget",
            "max_speed_grouped_sv_widget",
            "num_location_grouped_sv_widget",
            "nightday_ratio_grouped_sv_widget",
            "total_dist_grouped_sv_widget",
            "total_time_grouped_sv_widget",
            "td_grouped_map_widget",
            "traj_nightday_grouped_map_widget",
            "grouped_nsd_chart_widget_merge",
            "groupers",
            "time_range",
        ],
    }

    nodes = {
        "workflow_details": Node(
            async_task=set_workflow_details.validate()
            .handle_errors(task_instance_id="workflow_details")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial=(params_dict.get("workflow_details") or {}),
            method="call",
        ),
        "er_client_name": Node(
            async_task=set_er_connection.validate()
            .handle_errors(task_instance_id="er_client_name")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial=(params_dict.get("er_client_name") or {}),
            method="call",
        ),
        "time_range": Node(
            async_task=set_time_range.validate()
            .handle_errors(task_instance_id="time_range")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "time_format": "%d %b %Y %H:%M:%S %Z",
            }
            | (params_dict.get("time_range") or {}),
            method="call",
        ),
        "subject_obs": Node(
            async_task=get_subjectgroup_observations.validate()
            .handle_errors(task_instance_id="subject_obs")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "client": DependsOn("er_client_name"),
                "time_range": DependsOn("time_range"),
                "raise_on_empty": False,
                "include_details": False,
                "include_subjectsource_details": False,
            }
            | (params_dict.get("subject_obs") or {}),
            method="call",
        ),
        "groupers": Node(
            async_task=set_groupers.validate()
            .handle_errors(task_instance_id="groupers")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial=(params_dict.get("groupers") or {}),
            method="call",
        ),
        "subject_reloc": Node(
            async_task=process_relocations.validate()
            .handle_errors(task_instance_id="subject_reloc")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "observations": DependsOn("subject_obs"),
                "relocs_columns": [
                    "groupby_col",
                    "fixtime",
                    "junk_status",
                    "geometry",
                    "extra__subject__name",
                    "extra__subject__subject_subtype",
                    "extra__subject__sex",
                ],
                "filter_point_coords": [
                    {"x": 180.0, "y": 90.0},
                    {"x": 0.0, "y": 0.0},
                    {"x": 1.0, "y": 1.0},
                ],
            }
            | (params_dict.get("subject_reloc") or {}),
            method="call",
        ),
        "day_night_labels": Node(
            async_task=classify_is_night.validate()
            .handle_errors(task_instance_id="day_night_labels")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "relocations": DependsOn("subject_reloc"),
            }
            | (params_dict.get("day_night_labels") or {}),
            method="call",
        ),
        "subject_traj": Node(
            async_task=relocations_to_trajectory.validate()
            .handle_errors(task_instance_id="subject_traj")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "relocations": DependsOn("day_night_labels"),
            }
            | (params_dict.get("subject_traj") or {}),
            method="call",
        ),
        "traj_add_temporal_index": Node(
            async_task=add_temporal_index.validate()
            .handle_errors(task_instance_id="traj_add_temporal_index")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "df": DependsOn("subject_traj"),
                "time_col": "segment_start",
                "groupers": DependsOn("groupers"),
                "cast_to_datetime": True,
                "format": "mixed",
            }
            | (params_dict.get("traj_add_temporal_index") or {}),
            method="call",
        ),
        "rename_grouper_columns": Node(
            async_task=map_columns.validate()
            .handle_errors(task_instance_id="rename_grouper_columns")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "df": DependsOn("traj_add_temporal_index"),
                "drop_columns": [],
                "retain_columns": [],
                "rename_columns": {
                    "extra__name": "subject_name",
                    "extra__subject_subtype": "subject_subtype",
                    "extra__sex": "subject_sex",
                },
            }
            | (params_dict.get("rename_grouper_columns") or {}),
            method="call",
        ),
        "map_subject_sex": Node(
            async_task=map_values.validate()
            .handle_errors(task_instance_id="map_subject_sex")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "df": DependsOn("rename_grouper_columns"),
                "column_name": "subject_sex",
                "value_map": {"male": "male", "female": "female"},
                "missing_values": "replace",
                "replacement": "unknown",
            }
            | (params_dict.get("map_subject_sex") or {}),
            method="call",
        ),
        "classify_traj_speed": Node(
            async_task=apply_classification.validate()
            .handle_errors(task_instance_id="classify_traj_speed")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "df": DependsOn("map_subject_sex"),
                "input_column_name": "speed_kmhr",
                "output_column_name": "speed_bins",
                "classification_options": {"scheme": "equal_interval", "k": 6},
                "label_options": {"label_ranges": False, "label_decimals": 1},
            }
            | (params_dict.get("classify_traj_speed") or {}),
            method="call",
        ),
        "split_subject_traj_groups": Node(
            async_task=split_groups.validate()
            .handle_errors(task_instance_id="split_subject_traj_groups")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "df": DependsOn("classify_traj_speed"),
                "groupers": DependsOn("groupers"),
            }
            | (params_dict.get("split_subject_traj_groups") or {}),
            method="call",
        ),
        "base_map_defs": Node(
            async_task=set_base_maps.validate()
            .handle_errors(task_instance_id="base_map_defs")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial=(params_dict.get("base_map_defs") or {}),
            method="call",
        ),
        "sort_traj_speed": Node(
            async_task=sort_values.validate()
            .handle_errors(task_instance_id="sort_traj_speed")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "column_name": "speed_bins",
                "ascending": True,
                "na_position": "last",
            }
            | (params_dict.get("sort_traj_speed") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["df"],
                "argvalues": DependsOn("split_subject_traj_groups"),
            },
        ),
        "colormap_traj_speed": Node(
            async_task=apply_color_map.validate()
            .handle_errors(task_instance_id="colormap_traj_speed")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "input_column_name": "speed_bins",
                "output_column_name": "speed_bins_colormap",
                "colormap": [
                    "#1a9850",
                    "#91cf60",
                    "#d9ef8b",
                    "#fee08b",
                    "#fc8d59",
                    "#d73027",
                ],
            }
            | (params_dict.get("colormap_traj_speed") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["df"],
                "argvalues": DependsOn("sort_traj_speed"),
            },
        ),
        "speed_bin_legend_with_unit": Node(
            async_task=map_values_with_unit.validate()
            .handle_errors(task_instance_id="speed_bin_legend_with_unit")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "input_column_name": "speed_bins",
                "output_column_name": "speed_bins_formatted",
                "original_unit": "km/h",
                "new_unit": "km/h",
                "decimal_places": 1,
            }
            | (params_dict.get("speed_bin_legend_with_unit") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["df"],
                "argvalues": DependsOn("colormap_traj_speed"),
            },
        ),
        "speed_val_with_unit": Node(
            async_task=map_values_with_unit.validate()
            .handle_errors(task_instance_id="speed_val_with_unit")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "input_column_name": "speed_kmhr",
                "output_column_name": "speed_kmhr",
                "original_unit": "km/h",
                "new_unit": "km/h",
                "decimal_places": 1,
            }
            | (params_dict.get("speed_val_with_unit") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["df"],
                "argvalues": DependsOn("speed_bin_legend_with_unit"),
            },
        ),
        "rename_speed_display_columns": Node(
            async_task=map_columns.validate()
            .handle_errors(task_instance_id="rename_speed_display_columns")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "drop_columns": [],
                "retain_columns": [],
                "rename_columns": {
                    "segment_start": "Start",
                    "timespan_seconds": "Duration (s)",
                    "speed_kmhr": "Speed (kph)",
                    "extra__is_night": "Nighttime",
                    "subject_name": "Subject Name",
                    "subject_sex": "Subject Sex",
                },
            }
            | (params_dict.get("rename_speed_display_columns") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["df"],
                "argvalues": DependsOn("speed_val_with_unit"),
            },
        ),
        "traj_map_layers": Node(
            async_task=create_polyline_layer.validate()
            .handle_errors(task_instance_id="traj_map_layers")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                    all_geometry_are_none,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "layer_style": {"color_column": "speed_bins_colormap"},
                "legend": {
                    "label_column": "speed_bins_formatted",
                    "color_column": "speed_bins_colormap",
                },
                "tooltip_columns": [
                    "Start",
                    "Duration (s)",
                    "Speed (kph)",
                    "Nighttime",
                    "Subject Name",
                    "Subject Sex",
                ],
            }
            | (params_dict.get("traj_map_layers") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["geodataframe"],
                "argvalues": DependsOn("rename_speed_display_columns"),
            },
        ),
        "traj_ecomap": Node(
            async_task=draw_ecomap.validate()
            .handle_errors(task_instance_id="traj_ecomap")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "tile_layers": DependsOn("base_map_defs"),
                "north_arrow_style": {"placement": "top-left"},
                "legend_style": {"placement": "bottom-right"},
                "static": False,
                "title": None,
                "max_zoom": 20,
            }
            | (params_dict.get("traj_ecomap") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["geo_layers"],
                "argvalues": DependsOn("traj_map_layers"),
            },
        ),
        "ecomap_html_urls": Node(
            async_task=persist_text.validate()
            .handle_errors(task_instance_id="ecomap_html_urls")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "root_path": os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
            }
            | (params_dict.get("ecomap_html_urls") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["text"],
                "argvalues": DependsOn("traj_ecomap"),
            },
        ),
        "traj_map_widgets_single_views": Node(
            async_task=create_map_widget_single_view.validate()
            .handle_errors(task_instance_id="traj_map_widgets_single_views")
            .skipif(
                conditions=[
                    never,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "title": "Subject Group Trajectory Map",
            }
            | (params_dict.get("traj_map_widgets_single_views") or {}),
            method="map",
            kwargs={
                "argnames": ["view", "data"],
                "argvalues": DependsOn("ecomap_html_urls"),
            },
        ),
        "traj_grouped_map_widget": Node(
            async_task=merge_widget_views.validate()
            .handle_errors(task_instance_id="traj_grouped_map_widget")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "widgets": DependsOn("traj_map_widgets_single_views"),
            }
            | (params_dict.get("traj_grouped_map_widget") or {}),
            method="call",
        ),
        "sort_traj_night_day": Node(
            async_task=sort_values.validate()
            .handle_errors(task_instance_id="sort_traj_night_day")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "column_name": "extra__is_night",
                "ascending": False,
                "na_position": "last",
            }
            | (params_dict.get("sort_traj_night_day") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["df"],
                "argvalues": DependsOn("split_subject_traj_groups"),
            },
        ),
        "colormap_traj_night": Node(
            async_task=apply_color_map.validate()
            .handle_errors(task_instance_id="colormap_traj_night")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "colormap": ["#292965", "#e7a553"],
                "input_column_name": "extra__is_night",
                "output_column_name": "is_night_colors",
            }
            | (params_dict.get("colormap_traj_night") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["df"],
                "argvalues": DependsOn("sort_traj_night_day"),
            },
        ),
        "rename_nightday_display_columns": Node(
            async_task=map_columns.validate()
            .handle_errors(task_instance_id="rename_nightday_display_columns")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "drop_columns": [],
                "retain_columns": [],
                "rename_columns": {
                    "subject_name": "Subject Name",
                    "subject_subtype": "Subject Sex",
                    "extra__is_night": "Nighttime",
                },
            }
            | (params_dict.get("rename_nightday_display_columns") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["df"],
                "argvalues": DependsOn("colormap_traj_night"),
            },
        ),
        "traj_map_night_layers": Node(
            async_task=create_polyline_layer.validate()
            .handle_errors(task_instance_id="traj_map_night_layers")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                    all_geometry_are_none,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "layer_style": {"color_column": "is_night_colors"},
                "legend": {
                    "labels": ["Night", "Day"],
                    "colors": ["#292965", "#e7a553"],
                },
                "tooltip_columns": ["Subject Name", "Subject Sex", "Nighttime"],
            }
            | (params_dict.get("traj_map_night_layers") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["geodataframe"],
                "argvalues": DependsOn("rename_nightday_display_columns"),
            },
        ),
        "traj_nightday_ecomap": Node(
            async_task=draw_ecomap.validate()
            .handle_errors(task_instance_id="traj_nightday_ecomap")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "tile_layers": DependsOn("base_map_defs"),
                "north_arrow_style": {"placement": "top-left"},
                "legend_style": {"placement": "bottom-right"},
                "static": False,
                "title": None,
                "max_zoom": 20,
            }
            | (params_dict.get("traj_nightday_ecomap") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["geo_layers"],
                "argvalues": DependsOn("traj_map_night_layers"),
            },
        ),
        "ecomap_nightday_html_urls": Node(
            async_task=persist_text.validate()
            .handle_errors(task_instance_id="ecomap_nightday_html_urls")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "root_path": os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
            }
            | (params_dict.get("ecomap_nightday_html_urls") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["text"],
                "argvalues": DependsOn("traj_nightday_ecomap"),
            },
        ),
        "traj_map_nightday_widgets_sv": Node(
            async_task=create_map_widget_single_view.validate()
            .handle_errors(task_instance_id="traj_map_nightday_widgets_sv")
            .skipif(
                conditions=[
                    never,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "title": "Subject Group Night/Day Map",
            }
            | (params_dict.get("traj_map_nightday_widgets_sv") or {}),
            method="map",
            kwargs={
                "argnames": ["view", "data"],
                "argvalues": DependsOn("ecomap_nightday_html_urls"),
            },
        ),
        "traj_nightday_grouped_map_widget": Node(
            async_task=merge_widget_views.validate()
            .handle_errors(task_instance_id="traj_nightday_grouped_map_widget")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "widgets": DependsOn("traj_map_nightday_widgets_sv"),
            }
            | (params_dict.get("traj_nightday_grouped_map_widget") or {}),
            method="call",
        ),
        "mean_speed": Node(
            async_task=dataframe_column_mean.validate()
            .handle_errors(task_instance_id="mean_speed")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "column_name": "speed_kmhr",
            }
            | (params_dict.get("mean_speed") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["df"],
                "argvalues": DependsOn("split_subject_traj_groups"),
            },
        ),
        "average_speed_converted": Node(
            async_task=with_unit.validate()
            .handle_errors(task_instance_id="average_speed_converted")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "original_unit": "km/h",
                "new_unit": "km/h",
            }
            | (params_dict.get("average_speed_converted") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["value"],
                "argvalues": DependsOn("mean_speed"),
            },
        ),
        "mean_speed_sv_widgets": Node(
            async_task=create_single_value_widget_single_view.validate()
            .handle_errors(task_instance_id="mean_speed_sv_widgets")
            .skipif(
                conditions=[
                    never,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "title": "Mean Speed",
                "decimal_places": 1,
            }
            | (params_dict.get("mean_speed_sv_widgets") or {}),
            method="map",
            kwargs={
                "argnames": ["view", "data"],
                "argvalues": DependsOn("average_speed_converted"),
            },
        ),
        "mean_speed_grouped_sv_widget": Node(
            async_task=merge_widget_views.validate()
            .handle_errors(task_instance_id="mean_speed_grouped_sv_widget")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "widgets": DependsOn("mean_speed_sv_widgets"),
            }
            | (params_dict.get("mean_speed_grouped_sv_widget") or {}),
            method="call",
        ),
        "max_speed": Node(
            async_task=dataframe_column_max.validate()
            .handle_errors(task_instance_id="max_speed")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "column_name": "speed_kmhr",
            }
            | (params_dict.get("max_speed") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["df"],
                "argvalues": DependsOn("split_subject_traj_groups"),
            },
        ),
        "max_speed_converted": Node(
            async_task=with_unit.validate()
            .handle_errors(task_instance_id="max_speed_converted")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "original_unit": "km/h",
                "new_unit": "km/h",
            }
            | (params_dict.get("max_speed_converted") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["value"],
                "argvalues": DependsOn("max_speed"),
            },
        ),
        "max_speed_sv_widgets": Node(
            async_task=create_single_value_widget_single_view.validate()
            .handle_errors(task_instance_id="max_speed_sv_widgets")
            .skipif(
                conditions=[
                    never,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "title": "Max Speed",
                "decimal_places": 1,
            }
            | (params_dict.get("max_speed_sv_widgets") or {}),
            method="map",
            kwargs={
                "argnames": ["view", "data"],
                "argvalues": DependsOn("max_speed_converted"),
            },
        ),
        "max_speed_grouped_sv_widget": Node(
            async_task=merge_widget_views.validate()
            .handle_errors(task_instance_id="max_speed_grouped_sv_widget")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "widgets": DependsOn("max_speed_sv_widgets"),
            }
            | (params_dict.get("max_speed_grouped_sv_widget") or {}),
            method="call",
        ),
        "num_location": Node(
            async_task=dataframe_count.validate()
            .handle_errors(task_instance_id="num_location")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial=(params_dict.get("num_location") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["df"],
                "argvalues": DependsOn("split_subject_traj_groups"),
            },
        ),
        "num_location_sv_widgets": Node(
            async_task=create_single_value_widget_single_view.validate()
            .handle_errors(task_instance_id="num_location_sv_widgets")
            .skipif(
                conditions=[
                    never,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "title": "Number of Locations",
                "decimal_places": 1,
            }
            | (params_dict.get("num_location_sv_widgets") or {}),
            method="map",
            kwargs={
                "argnames": ["view", "data"],
                "argvalues": DependsOn("num_location"),
            },
        ),
        "num_location_grouped_sv_widget": Node(
            async_task=merge_widget_views.validate()
            .handle_errors(task_instance_id="num_location_grouped_sv_widget")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "widgets": DependsOn("num_location_sv_widgets"),
            }
            | (params_dict.get("num_location_grouped_sv_widget") or {}),
            method="call",
        ),
        "nightday_ratio": Node(
            async_task=get_night_day_ratio.validate()
            .handle_errors(task_instance_id="nightday_ratio")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial=(params_dict.get("nightday_ratio") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["df"],
                "argvalues": DependsOn("split_subject_traj_groups"),
            },
        ),
        "nightday_ratio_sv_widgets": Node(
            async_task=create_single_value_widget_single_view.validate()
            .handle_errors(task_instance_id="nightday_ratio_sv_widgets")
            .skipif(
                conditions=[
                    never,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "title": "Night/Day Ratio",
                "decimal_places": 1,
            }
            | (params_dict.get("nightday_ratio_sv_widgets") or {}),
            method="map",
            kwargs={
                "argnames": ["view", "data"],
                "argvalues": DependsOn("nightday_ratio"),
            },
        ),
        "nightday_ratio_grouped_sv_widget": Node(
            async_task=merge_widget_views.validate()
            .handle_errors(task_instance_id="nightday_ratio_grouped_sv_widget")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "widgets": DependsOn("nightday_ratio_sv_widgets"),
            }
            | (params_dict.get("nightday_ratio_grouped_sv_widget") or {}),
            method="call",
        ),
        "total_distance": Node(
            async_task=dataframe_column_sum.validate()
            .handle_errors(task_instance_id="total_distance")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "column_name": "dist_meters",
            }
            | (params_dict.get("total_distance") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["df"],
                "argvalues": DependsOn("split_subject_traj_groups"),
            },
        ),
        "total_dist_converted": Node(
            async_task=with_unit.validate()
            .handle_errors(task_instance_id="total_dist_converted")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "original_unit": "m",
                "new_unit": "km",
            }
            | (params_dict.get("total_dist_converted") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["value"],
                "argvalues": DependsOn("total_distance"),
            },
        ),
        "total_distance_sv_widgets": Node(
            async_task=create_single_value_widget_single_view.validate()
            .handle_errors(task_instance_id="total_distance_sv_widgets")
            .skipif(
                conditions=[
                    never,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "title": "Total Distance",
                "decimal_places": 1,
            }
            | (params_dict.get("total_distance_sv_widgets") or {}),
            method="map",
            kwargs={
                "argnames": ["view", "data"],
                "argvalues": DependsOn("total_dist_converted"),
            },
        ),
        "total_dist_grouped_sv_widget": Node(
            async_task=merge_widget_views.validate()
            .handle_errors(task_instance_id="total_dist_grouped_sv_widget")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "widgets": DependsOn("total_distance_sv_widgets"),
            }
            | (params_dict.get("total_dist_grouped_sv_widget") or {}),
            method="call",
        ),
        "total_time": Node(
            async_task=dataframe_column_sum.validate()
            .handle_errors(task_instance_id="total_time")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "column_name": "timespan_seconds",
            }
            | (params_dict.get("total_time") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["df"],
                "argvalues": DependsOn("split_subject_traj_groups"),
            },
        ),
        "total_time_converted": Node(
            async_task=with_unit.validate()
            .handle_errors(task_instance_id="total_time_converted")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "original_unit": "s",
                "new_unit": "h",
            }
            | (params_dict.get("total_time_converted") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["value"],
                "argvalues": DependsOn("total_time"),
            },
        ),
        "total_time_sv_widgets": Node(
            async_task=create_single_value_widget_single_view.validate()
            .handle_errors(task_instance_id="total_time_sv_widgets")
            .skipif(
                conditions=[
                    never,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "title": "Total Time",
                "decimal_places": 1,
            }
            | (params_dict.get("total_time_sv_widgets") or {}),
            method="map",
            kwargs={
                "argnames": ["view", "data"],
                "argvalues": DependsOn("total_time_converted"),
            },
        ),
        "total_time_grouped_sv_widget": Node(
            async_task=merge_widget_views.validate()
            .handle_errors(task_instance_id="total_time_grouped_sv_widget")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "widgets": DependsOn("total_time_sv_widgets"),
            }
            | (params_dict.get("total_time_grouped_sv_widget") or {}),
            method="call",
        ),
        "td": Node(
            async_task=calculate_elliptical_time_density.validate()
            .handle_errors(task_instance_id="td")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "crs": "ESRI:53042",
                "percentiles": [50.0, 60.0, 70.0, 80.0, 90.0, 95.0, 99.999],
                "nodata_value": "nan",
                "band_count": 1,
            }
            | (params_dict.get("td") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["trajectory_gdf"],
                "argvalues": DependsOn("split_subject_traj_groups"),
            },
        ),
        "td_colormap": Node(
            async_task=apply_color_map.validate()
            .handle_errors(task_instance_id="td_colormap")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "input_column_name": "percentile",
                "colormap": "RdYlGn",
                "output_column_name": "percentile_colormap",
            }
            | (params_dict.get("td_colormap") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["df"],
                "argvalues": DependsOn("td"),
            },
        ),
        "td_map_layer": Node(
            async_task=create_polygon_layer.validate()
            .handle_errors(task_instance_id="td_map_layer")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                    all_geometry_are_none,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "layer_style": {
                    "fill_color_column": "percentile_colormap",
                    "opacity": 0.7,
                    "get_line_width": 0,
                },
                "legend": {
                    "label_column": "percentile",
                    "color_column": "percentile_colormap",
                },
                "tooltip_columns": ["percentile"],
            }
            | (params_dict.get("td_map_layer") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["geodataframe"],
                "argvalues": DependsOn("td_colormap"),
            },
        ),
        "td_ecomap": Node(
            async_task=draw_ecomap.validate()
            .handle_errors(task_instance_id="td_ecomap")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "tile_layers": DependsOn("base_map_defs"),
                "north_arrow_style": {"placement": "top-left"},
                "legend_style": {"placement": "bottom-right"},
                "static": False,
                "title": None,
                "max_zoom": 20,
            }
            | (params_dict.get("td_ecomap") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["geo_layers"],
                "argvalues": DependsOn("td_map_layer"),
            },
        ),
        "td_ecomap_html_url": Node(
            async_task=persist_text.validate()
            .handle_errors(task_instance_id="td_ecomap_html_url")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "root_path": os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
            }
            | (params_dict.get("td_ecomap_html_url") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["text"],
                "argvalues": DependsOn("td_ecomap"),
            },
        ),
        "td_map_widget": Node(
            async_task=create_map_widget_single_view.validate()
            .handle_errors(task_instance_id="td_map_widget")
            .skipif(
                conditions=[
                    never,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "title": "Home Range Map",
            }
            | (params_dict.get("td_map_widget") or {}),
            method="map",
            kwargs={
                "argnames": ["view", "data"],
                "argvalues": DependsOn("td_ecomap_html_url"),
            },
        ),
        "td_grouped_map_widget": Node(
            async_task=merge_widget_views.validate()
            .handle_errors(task_instance_id="td_grouped_map_widget")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "widgets": DependsOn("td_map_widget"),
            }
            | (params_dict.get("td_grouped_map_widget") or {}),
            method="call",
        ),
        "nsd_rename_display_columns": Node(
            async_task=map_columns.validate()
            .handle_errors(task_instance_id="nsd_rename_display_columns")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "drop_columns": [],
                "retain_columns": [],
                "rename_columns": {"segment_start": "Time", "nsd": "NSD (m²)"},
            }
            | (params_dict.get("nsd_rename_display_columns") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["df"],
                "argvalues": DependsOn("split_subject_traj_groups"),
            },
        ),
        "nsd_chart": Node(
            async_task=draw_ecoplot.validate()
            .handle_errors(task_instance_id="nsd_chart")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "group_by": "subject_name",
                "ecoplot_configs": [
                    {
                        "x_col": "Time",
                        "y_col": "NSD (m²)",
                        "plot_style": {"xperiodalignment": None},
                        "color_column": None,
                    }
                ],
                "tickformat": "%b-%Y",
            }
            | (params_dict.get("nsd_chart") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["dataframe"],
                "argvalues": DependsOn("nsd_rename_display_columns"),
            },
        ),
        "nsd_chart_html_url": Node(
            async_task=persist_text.validate()
            .handle_errors(task_instance_id="nsd_chart_html_url")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "root_path": os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
            }
            | (params_dict.get("nsd_chart_html_url") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["text"],
                "argvalues": DependsOn("nsd_chart"),
            },
        ),
        "nsd_chart_widget": Node(
            async_task=create_plot_widget_single_view.validate()
            .handle_errors(task_instance_id="nsd_chart_widget")
            .skipif(
                conditions=[
                    never,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "title": "Net Square Displacement",
            }
            | (params_dict.get("nsd_chart_widget") or {}),
            method="map",
            kwargs={
                "argnames": ["view", "data"],
                "argvalues": DependsOn("nsd_chart_html_url"),
            },
        ),
        "grouped_nsd_chart_widget_merge": Node(
            async_task=merge_widget_views.validate()
            .handle_errors(task_instance_id="grouped_nsd_chart_widget_merge")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "widgets": DependsOn("nsd_chart_widget"),
            }
            | (params_dict.get("grouped_nsd_chart_widget_merge") or {}),
            method="call",
        ),
        "subject_tracking_dashboard": Node(
            async_task=gather_dashboard.validate()
            .handle_errors(task_instance_id="subject_tracking_dashboard")
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "details": DependsOn("workflow_details"),
                "widgets": DependsOnSequence(
                    [
                        DependsOn("traj_grouped_map_widget"),
                        DependsOn("mean_speed_grouped_sv_widget"),
                        DependsOn("max_speed_grouped_sv_widget"),
                        DependsOn("num_location_grouped_sv_widget"),
                        DependsOn("nightday_ratio_grouped_sv_widget"),
                        DependsOn("total_dist_grouped_sv_widget"),
                        DependsOn("total_time_grouped_sv_widget"),
                        DependsOn("td_grouped_map_widget"),
                        DependsOn("traj_nightday_grouped_map_widget"),
                        DependsOn("grouped_nsd_chart_widget_merge"),
                    ],
                ),
                "groupers": DependsOn("groupers"),
                "time_range": DependsOn("time_range"),
            }
            | (params_dict.get("subject_tracking_dashboard") or {}),
            method="call",
        ),
    }
    graph = Graph(dependencies=dependencies, nodes=nodes)
    results = graph.execute()
    return results
