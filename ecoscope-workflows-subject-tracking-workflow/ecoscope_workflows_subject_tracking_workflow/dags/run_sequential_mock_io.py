# AUTOGENERATED BY ECOSCOPE-WORKFLOWS; see fingerprint in README.md for details

# ruff: noqa: E402

"""WARNING: This file is generated in a testing context and should not be used in production.
Lines specific to the testing context are marked with a test tube emoji (ðŸ§ª) to indicate
that they would not be included (or would be different) in the production version of this file.
"""

import json
import os
import warnings  # ðŸ§ª
from ecoscope_workflows_core.testing import create_task_magicmock  # ðŸ§ª


from ecoscope_workflows_core.tasks.config import set_workflow_details
from ecoscope_workflows_core.tasks.io import set_er_connection
from ecoscope_workflows_core.tasks.groupby import set_groupers
from ecoscope_workflows_core.tasks.filter import set_time_range

get_subjectgroup_observations = create_task_magicmock(  # ðŸ§ª
    anchor="ecoscope_workflows_ext_ecoscope.tasks.io",  # ðŸ§ª
    func_name="get_subjectgroup_observations",  # ðŸ§ª
)  # ðŸ§ª
from ecoscope_workflows_ext_ecoscope.tasks.preprocessing import process_relocations
from ecoscope_workflows_ext_ecoscope.tasks.transformation import classify_is_night
from ecoscope_workflows_ext_ecoscope.tasks.preprocessing import (
    relocations_to_trajectory,
)
from ecoscope_workflows_core.tasks.transformation import add_temporal_index
from ecoscope_workflows_core.tasks.groupby import split_groups
from ecoscope_workflows_ext_ecoscope.tasks.transformation import apply_classification
from ecoscope_workflows_core.tasks.transformation import sort_values
from ecoscope_workflows_ext_ecoscope.tasks.transformation import apply_color_map
from ecoscope_workflows_core.tasks.transformation import map_values_with_unit
from ecoscope_workflows_ext_ecoscope.tasks.results import create_polyline_layer
from ecoscope_workflows_ext_ecoscope.tasks.results import draw_ecomap
from ecoscope_workflows_core.tasks.io import persist_text
from ecoscope_workflows_core.tasks.results import create_map_widget_single_view
from ecoscope_workflows_core.tasks.results import merge_widget_views
from ecoscope_workflows_core.tasks.analysis import dataframe_column_mean
from ecoscope_workflows_core.tasks.transformation import with_unit
from ecoscope_workflows_core.tasks.results import create_single_value_widget_single_view
from ecoscope_workflows_core.tasks.analysis import dataframe_column_max
from ecoscope_workflows_core.tasks.analysis import dataframe_count
from ecoscope_workflows_ext_ecoscope.tasks.analysis import get_night_day_ratio
from ecoscope_workflows_core.tasks.analysis import dataframe_column_sum
from ecoscope_workflows_ext_ecoscope.tasks.analysis import calculate_time_density
from ecoscope_workflows_ext_ecoscope.tasks.results import create_polygon_layer
from ecoscope_workflows_ext_ecoscope.tasks.results import draw_ecoplot
from ecoscope_workflows_core.tasks.results import create_plot_widget_single_view
from ecoscope_workflows_core.tasks.results import gather_dashboard

from ..params import Params


def main(params: Params):
    warnings.warn("This test script should not be used in production!")  # ðŸ§ª

    params_dict = json.loads(params.model_dump_json(exclude_unset=True))

    workflow_details = (
        set_workflow_details.validate()
        .partial(**(params_dict.get("workflow_details") or {}))
        .call()
    )

    er_client_name = (
        set_er_connection.validate()
        .partial(**(params_dict.get("er_client_name") or {}))
        .call()
    )

    groupers = (
        set_groupers.validate().partial(**(params_dict.get("groupers") or {})).call()
    )

    time_range = (
        set_time_range.validate()
        .partial(**(params_dict.get("time_range") or {}))
        .call()
    )

    subject_obs = (
        get_subjectgroup_observations.validate()
        .partial(
            client=er_client_name,
            time_range=time_range,
            **(params_dict.get("subject_obs") or {}),
        )
        .call()
    )

    subject_reloc = (
        process_relocations.validate()
        .partial(
            observations=subject_obs,
            relocs_columns=[
                "groupby_col",
                "fixtime",
                "junk_status",
                "geometry",
                "extra__subject__name",
            ],
            filter_point_coords=[
                {"x": 180.0, "y": 90.0},
                {"x": 0.0, "y": 0.0},
                {"x": 1.0, "y": 1.0},
            ],
            **(params_dict.get("subject_reloc") or {}),
        )
        .call()
    )

    day_night_labels = (
        classify_is_night.validate()
        .partial(
            relocations=subject_reloc, **(params_dict.get("day_night_labels") or {})
        )
        .call()
    )

    subject_traj = (
        relocations_to_trajectory.validate()
        .partial(
            relocations=day_night_labels, **(params_dict.get("subject_traj") or {})
        )
        .call()
    )

    traj_add_temporal_index = (
        add_temporal_index.validate()
        .partial(
            df=subject_traj,
            time_col="segment_start",
            groupers=groupers,
            **(params_dict.get("traj_add_temporal_index") or {}),
        )
        .call()
    )

    split_subject_traj_groups = (
        split_groups.validate()
        .partial(
            df=traj_add_temporal_index,
            groupers=groupers,
            **(params_dict.get("split_subject_traj_groups") or {}),
        )
        .call()
    )

    classify_traj_speed = (
        apply_classification.validate()
        .partial(
            input_column_name="speed_kmhr",
            output_column_name="speed_bins",
            classification_options={"scheme": "equal_interval", "k": 6},
            **(params_dict.get("classify_traj_speed") or {}),
        )
        .mapvalues(argnames=["df"], argvalues=split_subject_traj_groups)
    )

    sort_traj_speed = (
        sort_values.validate()
        .partial(
            column_name="speed_bins",
            ascending=True,
            **(params_dict.get("sort_traj_speed") or {}),
        )
        .mapvalues(argnames=["df"], argvalues=classify_traj_speed)
    )

    colormap_traj_speed = (
        apply_color_map.validate()
        .partial(
            input_column_name="speed_bins",
            output_column_name="speed_bins_colormap",
            colormap=["#1a9850", "#91cf60", "#d9ef8b", "#fee08b", "#fc8d59", "#d73027"],
            **(params_dict.get("colormap_traj_speed") or {}),
        )
        .mapvalues(argnames=["df"], argvalues=sort_traj_speed)
    )

    speedmap_legend_with_unit = (
        map_values_with_unit.validate()
        .partial(
            input_column_name="speed_bins",
            output_column_name="speed_bins_formatted",
            original_unit="km/h",
            new_unit="km/h",
            **(params_dict.get("speedmap_legend_with_unit") or {}),
        )
        .mapvalues(argnames=["df"], argvalues=colormap_traj_speed)
    )

    traj_map_layers = (
        create_polyline_layer.validate()
        .partial(
            layer_style={"color_column": "speed_bins_colormap"},
            legend={
                "label_column": "speed_bins_formatted",
                "color_column": "speed_bins_colormap",
            },
            **(params_dict.get("traj_map_layers") or {}),
        )
        .mapvalues(argnames=["geodataframe"], argvalues=speedmap_legend_with_unit)
    )

    traj_ecomap = (
        draw_ecomap.validate()
        .partial(
            tile_layers=[{"name": "TERRAIN"}, {"name": "SATELLITE", "opacity": 0.5}],
            north_arrow_style={"placement": "top-left"},
            legend_style={"placement": "bottom-right"},
            static=False,
            **(params_dict.get("traj_ecomap") or {}),
        )
        .mapvalues(argnames=["geo_layers"], argvalues=traj_map_layers)
    )

    ecomap_html_urls = (
        persist_text.validate()
        .partial(
            root_path=os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
            **(params_dict.get("ecomap_html_urls") or {}),
        )
        .mapvalues(argnames=["text"], argvalues=traj_ecomap)
    )

    traj_map_widgets_single_views = (
        create_map_widget_single_view.validate()
        .partial(
            title="Subject Group Trajectory Map",
            **(params_dict.get("traj_map_widgets_single_views") or {}),
        )
        .map(argnames=["view", "data"], argvalues=ecomap_html_urls)
    )

    traj_grouped_map_widget = (
        merge_widget_views.validate()
        .partial(
            widgets=traj_map_widgets_single_views,
            **(params_dict.get("traj_grouped_map_widget") or {}),
        )
        .call()
    )

    sort_traj_night_day = (
        sort_values.validate()
        .partial(
            column_name="extra__is_night",
            ascending=False,
            **(params_dict.get("sort_traj_night_day") or {}),
        )
        .mapvalues(argnames=["df"], argvalues=split_subject_traj_groups)
    )

    colormap_traj_night = (
        apply_color_map.validate()
        .partial(
            colormap=["#292965", "#e7a553"],
            input_column_name="extra__is_night",
            output_column_name="is_night_colors",
            **(params_dict.get("colormap_traj_night") or {}),
        )
        .mapvalues(argnames=["df"], argvalues=sort_traj_night_day)
    )

    traj_map_night_layers = (
        create_polyline_layer.validate()
        .partial(
            layer_style={"color_column": "is_night_colors"},
            legend={"labels": ["Night", "Day"], "colors": ["#292965", "#e7a553"]},
            **(params_dict.get("traj_map_night_layers") or {}),
        )
        .mapvalues(argnames=["geodataframe"], argvalues=colormap_traj_night)
    )

    traj_nightday_ecomap = (
        draw_ecomap.validate()
        .partial(
            tile_layers=[{"name": "TERRAIN"}, {"name": "SATELLITE", "opacity": 0.5}],
            north_arrow_style={"placement": "top-left"},
            legend_style={"placement": "bottom-right"},
            static=False,
            **(params_dict.get("traj_nightday_ecomap") or {}),
        )
        .mapvalues(argnames=["geo_layers"], argvalues=traj_map_night_layers)
    )

    ecomap_nightday_html_urls = (
        persist_text.validate()
        .partial(
            root_path=os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
            **(params_dict.get("ecomap_nightday_html_urls") or {}),
        )
        .mapvalues(argnames=["text"], argvalues=traj_nightday_ecomap)
    )

    traj_map_nightday_widgets_sv = (
        create_map_widget_single_view.validate()
        .partial(
            title="Subject Group Night/Day Map",
            **(params_dict.get("traj_map_nightday_widgets_sv") or {}),
        )
        .map(argnames=["view", "data"], argvalues=ecomap_nightday_html_urls)
    )

    traj_nightday_grouped_map_widget = (
        merge_widget_views.validate()
        .partial(
            widgets=traj_map_nightday_widgets_sv,
            **(params_dict.get("traj_nightday_grouped_map_widget") or {}),
        )
        .call()
    )

    mean_speed = (
        dataframe_column_mean.validate()
        .partial(column_name="speed_kmhr", **(params_dict.get("mean_speed") or {}))
        .mapvalues(argnames=["df"], argvalues=split_subject_traj_groups)
    )

    average_speed_converted = (
        with_unit.validate()
        .partial(
            original_unit="km/h",
            new_unit="km/h",
            **(params_dict.get("average_speed_converted") or {}),
        )
        .mapvalues(argnames=["value"], argvalues=mean_speed)
    )

    mean_speed_sv_widgets = (
        create_single_value_widget_single_view.validate()
        .partial(title="Mean Speed", **(params_dict.get("mean_speed_sv_widgets") or {}))
        .map(argnames=["view", "data"], argvalues=average_speed_converted)
    )

    mean_speed_grouped_sv_widget = (
        merge_widget_views.validate()
        .partial(
            widgets=mean_speed_sv_widgets,
            **(params_dict.get("mean_speed_grouped_sv_widget") or {}),
        )
        .call()
    )

    max_speed = (
        dataframe_column_max.validate()
        .partial(column_name="speed_kmhr", **(params_dict.get("max_speed") or {}))
        .mapvalues(argnames=["df"], argvalues=split_subject_traj_groups)
    )

    max_speed_converted = (
        with_unit.validate()
        .partial(
            original_unit="km/h",
            new_unit="km/h",
            **(params_dict.get("max_speed_converted") or {}),
        )
        .mapvalues(argnames=["value"], argvalues=max_speed)
    )

    max_speed_sv_widgets = (
        create_single_value_widget_single_view.validate()
        .partial(title="Max Speed", **(params_dict.get("max_speed_sv_widgets") or {}))
        .map(argnames=["view", "data"], argvalues=max_speed_converted)
    )

    max_speed_grouped_sv_widget = (
        merge_widget_views.validate()
        .partial(
            widgets=max_speed_sv_widgets,
            **(params_dict.get("max_speed_grouped_sv_widget") or {}),
        )
        .call()
    )

    num_location = (
        dataframe_count.validate()
        .partial(**(params_dict.get("num_location") or {}))
        .mapvalues(argnames=["df"], argvalues=split_subject_traj_groups)
    )

    num_location_sv_widgets = (
        create_single_value_widget_single_view.validate()
        .partial(
            title="Number of Locations",
            **(params_dict.get("num_location_sv_widgets") or {}),
        )
        .map(argnames=["view", "data"], argvalues=num_location)
    )

    num_location_grouped_sv_widget = (
        merge_widget_views.validate()
        .partial(
            widgets=num_location_sv_widgets,
            **(params_dict.get("num_location_grouped_sv_widget") or {}),
        )
        .call()
    )

    nightday_ratio = (
        get_night_day_ratio.validate()
        .partial(**(params_dict.get("nightday_ratio") or {}))
        .mapvalues(argnames=["df"], argvalues=split_subject_traj_groups)
    )

    nightday_ratio_sv_widgets = (
        create_single_value_widget_single_view.validate()
        .partial(
            title="Night/Day Ratio",
            **(params_dict.get("nightday_ratio_sv_widgets") or {}),
        )
        .map(argnames=["view", "data"], argvalues=nightday_ratio)
    )

    nightday_ratio_grouped_sv_widget = (
        merge_widget_views.validate()
        .partial(
            widgets=nightday_ratio_sv_widgets,
            **(params_dict.get("nightday_ratio_grouped_sv_widget") or {}),
        )
        .call()
    )

    total_distance = (
        dataframe_column_sum.validate()
        .partial(column_name="dist_meters", **(params_dict.get("total_distance") or {}))
        .mapvalues(argnames=["df"], argvalues=split_subject_traj_groups)
    )

    total_dist_converted = (
        with_unit.validate()
        .partial(
            original_unit="m",
            new_unit="km",
            **(params_dict.get("total_dist_converted") or {}),
        )
        .mapvalues(argnames=["value"], argvalues=total_distance)
    )

    total_distance_sv_widgets = (
        create_single_value_widget_single_view.validate()
        .partial(
            title="Total Distance",
            **(params_dict.get("total_distance_sv_widgets") or {}),
        )
        .map(argnames=["view", "data"], argvalues=total_dist_converted)
    )

    total_dist_grouped_sv_widget = (
        merge_widget_views.validate()
        .partial(
            widgets=total_distance_sv_widgets,
            **(params_dict.get("total_dist_grouped_sv_widget") or {}),
        )
        .call()
    )

    total_time = (
        dataframe_column_sum.validate()
        .partial(
            column_name="timespan_seconds", **(params_dict.get("total_time") or {})
        )
        .mapvalues(argnames=["df"], argvalues=split_subject_traj_groups)
    )

    total_time_converted = (
        with_unit.validate()
        .partial(
            original_unit="s",
            new_unit="h",
            **(params_dict.get("total_time_converted") or {}),
        )
        .mapvalues(argnames=["value"], argvalues=total_time)
    )

    total_time_sv_widgets = (
        create_single_value_widget_single_view.validate()
        .partial(title="Total Time", **(params_dict.get("total_time_sv_widgets") or {}))
        .map(argnames=["view", "data"], argvalues=total_time_converted)
    )

    total_time_grouped_sv_widget = (
        merge_widget_views.validate()
        .partial(
            widgets=total_time_sv_widgets,
            **(params_dict.get("total_time_grouped_sv_widget") or {}),
        )
        .call()
    )

    td = (
        calculate_time_density.validate()
        .partial(
            crs="ESRI:53042",
            percentiles=[50.0, 60.0, 70.0, 80.0, 90.0, 95.0, 99.999],
            **(params_dict.get("td") or {}),
        )
        .mapvalues(argnames=["trajectory_gdf"], argvalues=split_subject_traj_groups)
    )

    td_colormap = (
        apply_color_map.validate()
        .partial(
            input_column_name="percentile",
            colormap="RdYlGn",
            output_column_name="percentile_colormap",
            **(params_dict.get("td_colormap") or {}),
        )
        .mapvalues(argnames=["df"], argvalues=td)
    )

    td_map_layer = (
        create_polygon_layer.validate()
        .partial(
            layer_style={
                "fill_color_column": "percentile_colormap",
                "opacity": 0.7,
                "get_line_width": 0,
            },
            **(params_dict.get("td_map_layer") or {}),
        )
        .mapvalues(argnames=["geodataframe"], argvalues=td_colormap)
    )

    td_ecomap = (
        draw_ecomap.validate()
        .partial(
            tile_layers=[{"name": "TERRAIN"}, {"name": "SATELLITE", "opacity": 0.5}],
            north_arrow_style={"placement": "top-left"},
            legend_style={"placement": "bottom-right"},
            static=False,
            **(params_dict.get("td_ecomap") or {}),
        )
        .mapvalues(argnames=["geo_layers"], argvalues=td_map_layer)
    )

    td_ecomap_html_url = (
        persist_text.validate()
        .partial(
            root_path=os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
            **(params_dict.get("td_ecomap_html_url") or {}),
        )
        .mapvalues(argnames=["text"], argvalues=td_ecomap)
    )

    td_map_widget = (
        create_map_widget_single_view.validate()
        .partial(title="Home Range Map", **(params_dict.get("td_map_widget") or {}))
        .map(argnames=["view", "data"], argvalues=td_ecomap_html_url)
    )

    td_grouped_map_widget = (
        merge_widget_views.validate()
        .partial(
            widgets=td_map_widget, **(params_dict.get("td_grouped_map_widget") or {})
        )
        .call()
    )

    nsd_chart = (
        draw_ecoplot.validate()
        .partial(
            dataframe=traj_add_temporal_index,
            group_by="extra__name",
            x_axis="segment_start",
            y_axis="nsd",
            plot_style={"xperiodalignment": None},
            **(params_dict.get("nsd_chart") or {}),
        )
        .call()
    )

    nsd_chart_html_url = (
        persist_text.validate()
        .partial(
            text=nsd_chart,
            root_path=os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
            **(params_dict.get("nsd_chart_html_url") or {}),
        )
        .call()
    )

    nsd_chart_widget = (
        create_plot_widget_single_view.validate()
        .partial(
            data=nsd_chart_html_url,
            title="Net Square Displacement",
            **(params_dict.get("nsd_chart_widget") or {}),
        )
        .call()
    )

    subject_tracking_dashboard = (
        gather_dashboard.validate()
        .partial(
            details=workflow_details,
            widgets=[
                traj_grouped_map_widget,
                mean_speed_grouped_sv_widget,
                max_speed_grouped_sv_widget,
                num_location_grouped_sv_widget,
                nightday_ratio_grouped_sv_widget,
                total_dist_grouped_sv_widget,
                total_time_grouped_sv_widget,
                td_grouped_map_widget,
                traj_nightday_grouped_map_widget,
                nsd_chart_widget,
            ],
            groupers=groupers,
            time_range=time_range,
            **(params_dict.get("subject_tracking_dashboard") or {}),
        )
        .call()
    )

    return subject_tracking_dashboard
