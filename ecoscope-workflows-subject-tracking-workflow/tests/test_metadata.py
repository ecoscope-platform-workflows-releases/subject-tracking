# AUTOGENERATED BY ECOSCOPE-WORKFLOWS; see fingerprint in README.md for details

from typing import get_args

import pytest
import pydantic
from fastapi.testclient import TestClient
from ecoscope_workflows_core.testing import Case

from ecoscope_workflows_subject_tracking_workflow.app import app
from ecoscope_workflows_subject_tracking_workflow.params import Params
from ecoscope_workflows_subject_tracking_workflow.formdata import FormData


@pytest.fixture
def client():
    with TestClient(app) as client:
        yield client


@pytest.fixture(scope="session")
def formdata(case: Case) -> dict:
    """From a flat set of paramaters, create nested representation to reflect how the RJSF
    formdata would be structured. This is used for testing the formdata validation endpoint,
    and allows us to test the formdata validation endpoint without having to manually create
    the nested structure.
    """
    formdata: dict[str, dict] = {}
    aliased_annotations = {
        v.alias: v.annotation for v in FormData.model_fields.values() if v.alias
    }
    task_groups = {
        k: list(get_args(v)[0].model_fields) for k, v in aliased_annotations.items()
    }
    for k, v in case.params.items():
        if k in FormData.model_fields:
            formdata[k] = v
        else:
            group = next(g for g in task_groups if k in task_groups[g])
            if group in formdata:
                formdata[group].update({k: v})
            else:
                formdata[group] = {k: v}
    return formdata


def test_get_params(client: TestClient):
    response = client.get("/rjsf")
    assert response.status_code == 200
    assert set(list(response.json())) == {
        "properties",
        "$defs",
        "additionalProperties",
        "uiSchema",
    }


def test_validate_formdata(client: TestClient, case: Case, formdata: dict):
    invalid_request = client.post("/formdata-to-params", json={"invalid": "request"})
    assert invalid_request.status_code == 422

    response = client.post("/formdata-to-params", json=formdata)
    assert response.status_code == 200

    assert set(case.params).issubset(set(response.json()))

    if set(formdata) != set(case.params):
        # this workflow uses task groups, so make one other assert
        # task groups are not required, so these asserts are skipped
        # for workflows that simply use a flat layout

        with pytest.raises(pydantic.ValidationError):
            Params(**formdata)

    assert Params(**response.json()) == Params(**case.params)


def test_generate_nested_params(client: TestClient, case: Case, formdata: dict):
    response = client.post("/params-to-formdata", json=case.params)
    assert response.status_code == 200

    assert FormData(**response.json()) == FormData(**formdata)


def test_round_trip(client: TestClient, case: Case, formdata: dict):
    generate_params_response = client.post("/params-to-formdata", json=case.params)
    assert generate_params_response.status_code == 200
    assert generate_params_response.json() == formdata

    validate_response = client.post(
        "/formdata-to-params", json=generate_params_response.json()
    )
    assert validate_response.status_code == 200

    assert set(validate_response.json()) == set(case.params)
    assert Params(**validate_response.json()) == Params(**case.params)
